# Deploy (배포) 워크플로우
# 애플리케이션을 프로덕션 환경에 배포하고 성능을 모니터링합니다.
name: Deploy

# 워크플로우 트리거 조건 설정
on:
  # main 브랜치에 코드가 푸시될 때 실행 (프로덕션 배포)
  push:
    branches: [main]
  # Pull Request가 생성되거나 업데이트될 때 실행 (프리뷰 배포)
  pull_request:
    branches: [main]
  # GitHub UI에서 수동으로 워크플로우 실행 가능
  workflow_dispatch:

# 워크플로우 작업 정의
jobs:
  # 1. 빌드 검증 작업 (Pull Request용)
  build-verification:
    name: Build Verification
    runs-on: ubuntu-latest
    # Pull Request 이벤트일 때만 실행
    if: github.event_name == 'pull_request'
    steps:
      # 소스 코드 체크아웃
      - name: Checkout
        uses: actions/checkout@v4

      # pnpm 패키지 매니저 설정
      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          # package.json의 packageManager 필드와 일치하는 버전 사용
          version: 9.0.0

      # Node.js 런타임 환경 설정
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          # Node.js 18 버전 사용
          node-version: 18
          # pnpm 의존성 캐싱 활성화
          cache: 'pnpm'

      # 프로젝트 의존성 설치
      - name: Install dependencies
        # frozen-lockfile: pnpm-lock.yaml과 정확히 일치하는 버전 설치
        run: pnpm install --frozen-lockfile

      # Docusaurus 애플리케이션 빌드 검증
      - name: Build Docusaurus
        # Vercel 자동 배포 전에 빌드가 성공하는지 검증
        run: pnpm build --filter=docusaurus


  # 2. Lighthouse 성능 감사 작업 (Vercel 자동 배포 기반)
  lighthouse-audit:
    name: Lighthouse Audit
    runs-on: ubuntu-latest
    # PR 또는 main 브랜치 푸시 시 실행 (Vercel이 자동 배포)
    if: github.event_name == 'pull_request' || (github.event_name == 'push' && github.ref == 'refs/heads/main')
    steps:
      # 소스 코드 체크아웃
      - name: Checkout
        uses: actions/checkout@v4

      # Vercel 자동 배포 완료까지 대기
      - name: Wait for Vercel deployment
        # Vercel이 자동으로 배포를 완료할 시간 확보 (120초 대기)
        run: sleep 120

      # Vercel 프리뷰 URL 생성
      - name: Generate Vercel preview URL
        id: get-url
        run: |
          # 실제 배포 URL을 기반으로 프리뷰 URL 생성
          # 프로덕션: https://developjik-workspace-docusaurus.vercel.app/
          # 프리뷰: https://developjik-workspace-docusaurus-git-{branch}.vercel.app/
          BRANCH_NAME=$(echo "${{ github.head_ref }}" | sed 's/[^a-zA-Z0-9-]/-/g' | tr '[:upper:]' '[:lower:]')
          
          if [ "${{ github.event_name }}" == "pull_request" ]; then
            # PR일 때는 브랜치별 프리뷰 URL 사용
            PREVIEW_URL="https://developjik-workspace-docusaurus-git-${BRANCH_NAME}.vercel.app"
          else
            # main 브랜치 푸시일 때는 프로덕션 URL 사용
            PREVIEW_URL="https://developjik-workspace-docusaurus.vercel.app"
          fi
          
          echo "url=${PREVIEW_URL}" >> $GITHUB_OUTPUT
          echo "Generated URL: ${PREVIEW_URL}"

      # Lighthouse CI를 사용한 성능 감사
      - name: Run Lighthouse CI
        uses: treosh/lighthouse-ci-action@v10
        with:
          # Vercel이 자동 배포한 URL에 대해 Lighthouse 실행
          urls: |
            ${{ steps.get-url.outputs.url }}
          # 감사 결과 아티팩트로 업로드
          uploadArtifacts: true
          # 임시 공개 저장소 사용 (결과를 공유 가능한 URL로 제공)
          temporaryPublicStorage: true

  # 3. 성능 테스트 작업
  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    steps:
      # 소스 코드 체크아웃
      - name: Checkout
        uses: actions/checkout@v4

      # Node.js 런타임 환경 설정
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18

      # pnpm 패키지 매니저 설정
      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9.0.0

      # 프로젝트 의존성 설치
      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      # Docusaurus 애플리케이션 빌드
      - name: Build Docusaurus
        run: pnpm build --filter=docusaurus

      # 번들 크기 분석 및 보고
      - name: Analyze bundle sizes
        run: |
          # GitHub Actions 단계 요약에 번들 분석 결과 추가
          echo "## Bundle Analysis 📦" >> $GITHUB_STEP_SUMMARY
          echo "| App | Size |" >> $GITHUB_STEP_SUMMARY
          echo "|-----|------|" >> $GITHUB_STEP_SUMMARY
          
          # Docusaurus 빌드 디렉토리가 존재하는 경우 크기 측정
          if [ -d "apps/docusaurus/build" ]; then
            # 디스크 사용량을 사람이 읽기 쉬운 형태로 표시
            size=$(du -sh apps/docusaurus/build | cut -f1)
            echo "| docusaurus | $size |" >> $GITHUB_STEP_SUMMARY
          fi